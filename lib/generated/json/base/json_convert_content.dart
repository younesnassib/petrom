// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:petrom_fidelite/models/alerte_response_entity.dart';
import 'package:petrom_fidelite/models/auth_response_entity.dart';
import 'package:petrom_fidelite/models/car_add_entity.dart';
import 'package:petrom_fidelite/models/car_response_entity.dart';
import 'package:petrom_fidelite/models/carte_response_entity.dart';
import 'package:petrom_fidelite/models/default_infos_entity.dart';
import 'package:petrom_fidelite/models/deletcar_entity.dart';
import 'package:petrom_fidelite/models/deletealerte_entity.dart';
import 'package:petrom_fidelite/models/historiquecarte_entity.dart';
import 'package:petrom_fidelite/models/transactions_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
	static final Map<String, JsonConvertFunction> _convertFuncMap = {
		(AlerteResponseEntity).toString(): AlerteResponseEntity.fromJson,
		(AlerteResponseHeader).toString(): AlerteResponseHeader.fromJson,
		(AlerteResponseResponse).toString(): AlerteResponseResponse.fromJson,
		(AuthResponseEntity).toString(): AuthResponseEntity.fromJson,
		(AuthResponseHeader).toString(): AuthResponseHeader.fromJson,
		(AuthResponseResponse).toString(): AuthResponseResponse.fromJson,
		(AuthResponseResponseClient).toString(): AuthResponseResponseClient.fromJson,
		(AuthResponseResponseDashboard).toString(): AuthResponseResponseDashboard.fromJson,
		(CarAddEntity).toString(): CarAddEntity.fromJson,
		(CarAddHeader).toString(): CarAddHeader.fromJson,
		(CarResponseEntity).toString(): CarResponseEntity.fromJson,
		(CarResponseHeader).toString(): CarResponseHeader.fromJson,
		(CarResponseResponse).toString(): CarResponseResponse.fromJson,
		(CarteResponseEntity).toString(): CarteResponseEntity.fromJson,
		(CarteResponseHeader).toString(): CarteResponseHeader.fromJson,
		(CarteResponseResponse).toString(): CarteResponseResponse.fromJson,
		(DefaultInfosEntity).toString(): DefaultInfosEntity.fromJson,
		(DefaultInfosHeader).toString(): DefaultInfosHeader.fromJson,
		(DefaultInfosResponse).toString(): DefaultInfosResponse.fromJson,
		(DefaultInfosResponseStations).toString(): DefaultInfosResponseStations.fromJson,
		(DefaultInfosResponseMarquevehicules).toString(): DefaultInfosResponseMarquevehicules.fromJson,
		(DeletcarEntity).toString(): DeletcarEntity.fromJson,
		(DeletcarHeader).toString(): DeletcarHeader.fromJson,
		(DeletealerteEntity).toString(): DeletealerteEntity.fromJson,
		(DeletealerteHeader).toString(): DeletealerteHeader.fromJson,
		(HistoriquecarteEntity).toString(): HistoriquecarteEntity.fromJson,
		(HistoriquecarteHeader).toString(): HistoriquecarteHeader.fromJson,
		(HistoriquecarteResponse).toString(): HistoriquecarteResponse.fromJson,
		(TransactionsEntity).toString(): TransactionsEntity.fromJson,
		(TransactionsHeader).toString(): TransactionsHeader.fromJson,
		(TransactionsResponse).toString(): TransactionsResponse.fromJson,
	};

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<AlerteResponseEntity>[] is M){
			return data.map<AlerteResponseEntity>((Map<String, dynamic> e) => AlerteResponseEntity.fromJson(e)).toList() as M;
		}
		if(<AlerteResponseHeader>[] is M){
			return data.map<AlerteResponseHeader>((Map<String, dynamic> e) => AlerteResponseHeader.fromJson(e)).toList() as M;
		}
		if(<AlerteResponseResponse>[] is M){
			return data.map<AlerteResponseResponse>((Map<String, dynamic> e) => AlerteResponseResponse.fromJson(e)).toList() as M;
		}
		if(<AuthResponseEntity>[] is M){
			return data.map<AuthResponseEntity>((Map<String, dynamic> e) => AuthResponseEntity.fromJson(e)).toList() as M;
		}
		if(<AuthResponseHeader>[] is M){
			return data.map<AuthResponseHeader>((Map<String, dynamic> e) => AuthResponseHeader.fromJson(e)).toList() as M;
		}
		if(<AuthResponseResponse>[] is M){
			return data.map<AuthResponseResponse>((Map<String, dynamic> e) => AuthResponseResponse.fromJson(e)).toList() as M;
		}
		if(<AuthResponseResponseClient>[] is M){
			return data.map<AuthResponseResponseClient>((Map<String, dynamic> e) => AuthResponseResponseClient.fromJson(e)).toList() as M;
		}
		if(<AuthResponseResponseDashboard>[] is M){
			return data.map<AuthResponseResponseDashboard>((Map<String, dynamic> e) => AuthResponseResponseDashboard.fromJson(e)).toList() as M;
		}
		if(<CarAddEntity>[] is M){
			return data.map<CarAddEntity>((Map<String, dynamic> e) => CarAddEntity.fromJson(e)).toList() as M;
		}
		if(<CarAddHeader>[] is M){
			return data.map<CarAddHeader>((Map<String, dynamic> e) => CarAddHeader.fromJson(e)).toList() as M;
		}
		if(<CarResponseEntity>[] is M){
			return data.map<CarResponseEntity>((Map<String, dynamic> e) => CarResponseEntity.fromJson(e)).toList() as M;
		}
		if(<CarResponseHeader>[] is M){
			return data.map<CarResponseHeader>((Map<String, dynamic> e) => CarResponseHeader.fromJson(e)).toList() as M;
		}
		if(<CarResponseResponse>[] is M){
			return data.map<CarResponseResponse>((Map<String, dynamic> e) => CarResponseResponse.fromJson(e)).toList() as M;
		}
		if(<CarteResponseEntity>[] is M){
			return data.map<CarteResponseEntity>((Map<String, dynamic> e) => CarteResponseEntity.fromJson(e)).toList() as M;
		}
		if(<CarteResponseHeader>[] is M){
			return data.map<CarteResponseHeader>((Map<String, dynamic> e) => CarteResponseHeader.fromJson(e)).toList() as M;
		}
		if(<CarteResponseResponse>[] is M){
			return data.map<CarteResponseResponse>((Map<String, dynamic> e) => CarteResponseResponse.fromJson(e)).toList() as M;
		}
		if(<DefaultInfosEntity>[] is M){
			return data.map<DefaultInfosEntity>((Map<String, dynamic> e) => DefaultInfosEntity.fromJson(e)).toList() as M;
		}
		if(<DefaultInfosHeader>[] is M){
			return data.map<DefaultInfosHeader>((Map<String, dynamic> e) => DefaultInfosHeader.fromJson(e)).toList() as M;
		}
		if(<DefaultInfosResponse>[] is M){
			return data.map<DefaultInfosResponse>((Map<String, dynamic> e) => DefaultInfosResponse.fromJson(e)).toList() as M;
		}
		if(<DefaultInfosResponseStations>[] is M){
			return data.map<DefaultInfosResponseStations>((Map<String, dynamic> e) => DefaultInfosResponseStations.fromJson(e)).toList() as M;
		}
		if(<DefaultInfosResponseMarquevehicules>[] is M){
			return data.map<DefaultInfosResponseMarquevehicules>((Map<String, dynamic> e) => DefaultInfosResponseMarquevehicules.fromJson(e)).toList() as M;
		}
		if(<DeletcarEntity>[] is M){
			return data.map<DeletcarEntity>((Map<String, dynamic> e) => DeletcarEntity.fromJson(e)).toList() as M;
		}
		if(<DeletcarHeader>[] is M){
			return data.map<DeletcarHeader>((Map<String, dynamic> e) => DeletcarHeader.fromJson(e)).toList() as M;
		}
		if(<DeletealerteEntity>[] is M){
			return data.map<DeletealerteEntity>((Map<String, dynamic> e) => DeletealerteEntity.fromJson(e)).toList() as M;
		}
		if(<DeletealerteHeader>[] is M){
			return data.map<DeletealerteHeader>((Map<String, dynamic> e) => DeletealerteHeader.fromJson(e)).toList() as M;
		}
		if(<HistoriquecarteEntity>[] is M){
			return data.map<HistoriquecarteEntity>((Map<String, dynamic> e) => HistoriquecarteEntity.fromJson(e)).toList() as M;
		}
		if(<HistoriquecarteHeader>[] is M){
			return data.map<HistoriquecarteHeader>((Map<String, dynamic> e) => HistoriquecarteHeader.fromJson(e)).toList() as M;
		}
		if(<HistoriquecarteResponse>[] is M){
			return data.map<HistoriquecarteResponse>((Map<String, dynamic> e) => HistoriquecarteResponse.fromJson(e)).toList() as M;
		}
		if(<TransactionsEntity>[] is M){
			return data.map<TransactionsEntity>((Map<String, dynamic> e) => TransactionsEntity.fromJson(e)).toList() as M;
		}
		if(<TransactionsHeader>[] is M){
			return data.map<TransactionsHeader>((Map<String, dynamic> e) => TransactionsHeader.fromJson(e)).toList() as M;
		}
		if(<TransactionsResponse>[] is M){
			return data.map<TransactionsResponse>((Map<String, dynamic> e) => TransactionsResponse.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.asT<M>(json);
		}
	}
}